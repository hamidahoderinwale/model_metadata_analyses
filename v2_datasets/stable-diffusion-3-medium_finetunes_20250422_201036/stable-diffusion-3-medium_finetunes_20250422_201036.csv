model_id,card,metadata,depth,children,children_count,adapters,adapters_count,quantized,quantized_count,merges,merges_count,spaces,spaces_count
stabilityai/stable-diffusion-3-medium,"---
license: other
license_name: stabilityai-ai-community
license_link: LICENSE.md
tags:
- text-to-image
- stable-diffusion
- diffusion-single-file
inference: false
extra_gated_prompt: >-
  By clicking ""Agree"", you agree to the [License
  Agreement](https://huggingface.co/stabilityai/stable-diffusion-3-medium/blob/main/LICENSE.md)
  and acknowledge Stability AI's [Privacy
  Policy](https://stability.ai/privacy-policy).
extra_gated_fields:
  Name: text
  Email: text
  Country: country
  Organization or Affiliation: text
  Receive email updates and promotions on Stability AI products, services, and research?:
    type: select
    options:
    - 'Yes'
    - 'No'
  I agree to the License Agreement and acknowledge Stability AI's Privacy Policy: checkbox
language:
- en
pipeline_tag: text-to-image
---
# Stable Diffusion 3 Medium
![sd3 demo images](sd3demo.jpg)

## Model

![mmdit](mmdit.png)

[Stable Diffusion 3 Medium](https://stability.ai/news/stable-diffusion-3-medium) is a Multimodal Diffusion Transformer (MMDiT) text-to-image model that features greatly improved performance in image quality, typography, complex prompt understanding, and resource-efficiency.

For more technical details, please refer to the [Research paper](https://stability.ai/news/stable-diffusion-3-research-paper).

Please note: this model is released under the Stability Community License. For Enterprise License visit Stability.ai or [contact us](https://stability.ai/enterprise) for commercial licensing details.



### Model Description

- **Developed by:** Stability AI
- **Model type:** MMDiT text-to-image generative model
- **Model Description:** This is a model that can be used to generate images based on text prompts. It is a Multimodal Diffusion Transformer
(https://arxiv.org/abs/2403.03206) that uses three fixed, pretrained text encoders 
([OpenCLIP-ViT/G](https://github.com/mlfoundations/open_clip), [CLIP-ViT/L](https://github.com/openai/CLIP/tree/main) and [T5-xxl](https://huggingface.co/google/t5-v1_1-xxl))

### License

- **Community License:** Free for research, non-commercial, and commercial use for organisations or individuals with less than $1M annual revenue. You only need a paid Enterprise license if your yearly revenues exceed USD$1M and you use Stability AI models in commercial products or services. Read more: https://stability.ai/license
- **For companies above this revenue threshold**: please contact us: https://stability.ai/enterprise


### Model Sources

For local or self-hosted use, we recommend [ComfyUI](https://github.com/comfyanonymous/ComfyUI) for inference.

Stable Diffusion 3 Medium is available on our [Stability API Platform](https://platform.stability.ai/docs/api-reference#tag/Generate/paths/~1v2beta~1stable-image~1generate~1sd3/post). 

Stable Diffusion 3 models and workflows are available on [Stable Assistant](https://stability.ai/stable-assistant) and on Discord via [Stable Artisan](https://stability.ai/stable-artisan). 

- **ComfyUI:** https://github.com/comfyanonymous/ComfyUI
- **StableSwarmUI:** https://github.com/Stability-AI/StableSwarmUI
- **Tech report:** https://stability.ai/news/stable-diffusion-3-research-paper
- **Demo:** https://huggingface.co/spaces/stabilityai/stable-diffusion-3-medium
- **Diffusers support:** https://huggingface.co/stabilityai/stable-diffusion-3-medium-diffusers


## Training Dataset

We used synthetic data and filtered publicly available data to train our models. The model was pre-trained on 1 billion images. The fine-tuning data includes 30M high-quality aesthetic images focused on specific visual content and style, as well as 3M preference data images.

## File Structure
```
├── comfy_example_workflows/
│   ├── sd3_medium_example_workflow_basic.json
│   ├── sd3_medium_example_workflow_multi_prompt.json
│   └── sd3_medium_example_workflow_upscaling.json
│
├── text_encoders/
│   ├── README.md
│   ├── clip_g.safetensors
│   ├── clip_l.safetensors
│   ├── t5xxl_fp16.safetensors
│   └── t5xxl_fp8_e4m3fn.safetensors
│
├── LICENSE
├── sd3_medium.safetensors
├── sd3_medium_incl_clips.safetensors
├── sd3_medium_incl_clips_t5xxlfp8.safetensors
└── sd3_medium_incl_clips_t5xxlfp16.safetensors

```

We have prepared three packaging variants of the SD3 Medium model, each equipped with the same set of MMDiT & VAE weights, for user convenience.

* `sd3_medium.safetensors`  includes the MMDiT and VAE weights but does not include any text encoders.
* `sd3_medium_incl_clips_t5xxlfp16.safetensors` contains all necessary weights, including fp16 version of the T5XXL text encoder.
* `sd3_medium_incl_clips_t5xxlfp8.safetensors` contains all necessary weights, including fp8 version of the T5XXL text encoder, offering a balance between quality and resource requirements.
* `sd3_medium_incl_clips.safetensors` includes all necessary weights except for the T5XXL text encoder. It requires minimal resources, but the model's performance will differ without the T5XXL text encoder.
* The `text_encoders` folder contains three text encoders and their original model card links for user convenience. All components within the text_encoders folder (and their equivalents embedded in other packings)  are subject to their respective original licenses.
* The `example_workfows` folder contains example comfy workflows.

## Using with Diffusers

This repository corresponds to the original release weights. You can find the _diffusers_ compatible weights [here](https://huggingface.co/stabilityai/stable-diffusion-3-medium-diffusers). Make sure you upgrade to the latest version of diffusers: `pip install -U diffusers`. And then you can run:

```python
import torch
from diffusers import StableDiffusion3Pipeline

pipe = StableDiffusion3Pipeline.from_pretrained(""stabilityai/stable-diffusion-3-medium-diffusers"", torch_dtype=torch.float16)
pipe = pipe.to(""cuda"")

image = pipe(
    ""A cat holding a sign that says hello world"",
    negative_prompt="""",
    num_inference_steps=28,
    guidance_scale=7.0,
).images[0]
image
```

Refer to [the documentation](https://huggingface.co/docs/diffusers/main/en/api/pipelines/stable_diffusion/stable_diffusion_3) for more details on optimization and image-to-image support.

## Uses

### Intended Uses

Intended uses include the following: 
* Generation of artworks and use in design and other artistic processes.
* Applications in educational or creative tools.
* Research on generative models, including understanding the limitations of generative models.

All uses of the model should be in accordance with our [Acceptable Use Policy](https://stability.ai/use-policy).

### Out-of-Scope Uses

The model was not trained to be factual or true representations of people or events.  As such, using the model to generate such content is out-of-scope of the abilities of this model.

## Safety

As part of our safety-by-design and responsible AI deployment approach, we implement safety measures throughout the development of our models, from the time we begin pre-training a model to the ongoing development, fine-tuning, and deployment of each model. We have implemented a number of safety mitigations that are intended to reduce the risk of severe harms, however we recommend that developers conduct their own testing and apply additional mitigations based on their specific use cases.  
For more about our approach to Safety, please visit our [Safety page](https://stability.ai/safety).

### Evaluation Approach

Our evaluation methods include structured evaluations and internal and external red-teaming testing for specific, severe harms such as child sexual abuse and exploitation, extreme violence, and gore, sexually explicit content, and non-consensual nudity.  Testing was conducted primarily in English and may not cover all possible harms.  As with any model, the model may, at times, produce inaccurate, biased or objectionable responses to user prompts. 

### Risks identified and mitigations:

* Harmful content:  We have used filtered data sets when training our models and implemented safeguards that attempt to strike the right balance between usefulness and preventing harm. However, this does not guarantee that all possible harmful content has been removed. The model may, at times, generate toxic or biased content.  All developers and deployers should exercise caution and implement content safety guardrails based on their specific product policies and application use cases.
* Misuse: Technical limitations and developer and end-user education can help mitigate against malicious applications of models. All users are required to adhere to our Acceptable Use Policy, including when applying fine-tuning and prompt engineering mechanisms. Please reference the Stability AI Acceptable Use Policy for information on violative uses of our products.
* Privacy violations: Developers and deployers are encouraged to adhere to privacy regulations with techniques that respect data privacy.

### Contact

Please report any issues with the model or contact us:

* Safety issues:  safety@stability.ai
* Security issues:  security@stability.ai
* Privacy issues:  privacy@stability.ai 
* License and general: https://stability.ai/license
* Enterprise license: https://stability.ai/enterprise","{""id"": ""stabilityai/stable-diffusion-3-medium"", ""author"": ""stabilityai"", ""sha"": ""19b7f516efea082d257947e057e6f419e26fd497"", ""last_modified"": ""2024-08-12 12:37:42+00:00"", ""created_at"": ""2024-05-30 07:38:13+00:00"", ""private"": false, ""gated"": ""auto"", ""disabled"": false, ""downloads"": 16022, ""downloads_all_time"": null, ""likes"": 4758, ""library_name"": ""diffusion-single-file"", ""gguf"": null, ""inference"": ""warm"", ""tags"": [""diffusion-single-file"", ""text-to-image"", ""stable-diffusion"", ""en"", ""arxiv:2403.03206"", ""license:other"", ""region:us""], ""pipeline_tag"": ""text-to-image"", ""mask_token"": null, ""trending_score"": null, ""card_data"": ""language:\n- en\nlicense: other\nlicense_name: stabilityai-ai-community\nlicense_link: LICENSE.md\npipeline_tag: text-to-image\ntags:\n- text-to-image\n- stable-diffusion\n- diffusion-single-file\ninference: false\nextra_gated_prompt: By clicking \""Agree\"", you agree to the [License Agreement](https://huggingface.co/stabilityai/stable-diffusion-3-medium/blob/main/LICENSE.md)\n  and acknowledge Stability AI's [Privacy Policy](https://stability.ai/privacy-policy).\nextra_gated_fields:\n  Name: text\n  Email: text\n  Country: country\n  Organization or Affiliation: text\n  Receive email updates and promotions on Stability AI products, services, and research?:\n    type: select\n    options:\n    - 'Yes'\n    - 'No'\n  I agree to the License Agreement and acknowledge Stability AI's Privacy Policy: checkbox"", ""widget_data"": null, ""model_index"": null, ""config"": null, ""transformers_info"": null, ""siblings"": [""RepoSibling(rfilename='.gitattributes', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='LICENSE.md', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='README.md', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='comfy_example_workflows/sd3_medium_example_workflow_basic.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='comfy_example_workflows/sd3_medium_example_workflow_multi_prompt.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='comfy_example_workflows/sd3_medium_example_workflow_upscaling.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='demo_images/demo (1).png', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='demo_images/demo (10).png', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='demo_images/demo (2).png', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='demo_images/demo (3).png', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='demo_images/demo (4).png', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='demo_images/demo (5).png', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='demo_images/demo (6).png', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='demo_images/demo (7).png', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='demo_images/demo (8).png', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='demo_images/demo (9).png', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='mmdit.png', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='sd3_medium.safetensors', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='sd3_medium_incl_clips.safetensors', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='sd3_medium_incl_clips_t5xxlfp16.safetensors', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='sd3_medium_incl_clips_t5xxlfp8.safetensors', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='sd3demo.jpg', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='sd3demo_prompts.txt', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='text_encoders/README.md', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='text_encoders/clip_g.safetensors', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='text_encoders/clip_l.safetensors', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='text_encoders/t5xxl_fp16.safetensors', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='text_encoders/t5xxl_fp8_e4m3fn.safetensors', size=None, blob_id=None, lfs=None)""], ""spaces"": [""stabilityai/stable-diffusion-3-medium"", ""markmagic/Stable-Diffusion-3"", ""jasperai/flash-sd3"", ""markmagic/Stable-Diffusion-3-FREE"", ""kadirnar/Stable-Diffusion-3"", ""ameerazam08/SD-3-Medium-GPU"", ""alfredplpl/sd3-with-LLM"", ""madebyollin/sd3-with-taesd3-previews"", ""Nymbo/Stable-Diffusion-3"", ""aipicasso/emi-3"", ""rphrp1985/stable-diffusion-3-medium"", ""FallnAI/DiffusersUI"", ""kevinwang676/Diffutoon"", ""awacke1/ImageMultiagentSystem"", ""9kopb/stabilityai-stable-diffusion-3-medium"", ""philipp-zettl/stable-diffusion-3-medium"", ""loki0807/stabilityai-stable-diffusion-3-medium"", ""mocreate/stabilityai-stable-diffusion-3-medium"", ""Javedalam/StabilityAI-SD-V3-Medium_GPU"", ""Wenes/stabilityai-stable-diffusion-3-medium"", ""SanthoshkumarK/stabilityai-stable-diffusion-3-medium"", ""bokkbokk/stabilityai-stable-diffusion-3-medium"", ""FallnAI/stabilityai-stable-diffusion-3-medium"", ""sammyview80/stability-logo"", ""Walid-Ahmed/image_gen"", ""kasper-boy/Transform_Ordinary_Photos_into_Extraordinary_Art"", ""yangtb24/sone"", ""GPUModelSpotlight/Analysis-Of-Image-Song-Video-Prompts"", ""yangtb24/sone-latest"", ""AguaL/Illustrious-xl-early-release-v0"", ""hf-demo-linux/sili"", ""K00B404/FLUX-Wallpaper-HD-Maker_p"", ""hkxiaoyao/sili"", ""jry241/sili"", ""sammyview80/flask_rm_bg-cp"", ""DanHX/KHome"", ""saneowl/stabilityai-stable-diffusion-3-medium"", ""Johey/stabilityai-stable-diffusion-3-medium"", ""saneowl/stabilityai-stable-diffusion-3-medium-2"", ""froggiddin/stabilityai-stable-diffusion-3-medium"", ""KennyOry/stabilityai-stable-diffusion-3-medium"", ""qsdreams/stabilityai-stable-diffusion-3-medium"", ""ValeriOkrd/stabilityai-stable-diffusion-3-medium"", ""amazing666/stabilityai-stable-diffusion-3-medium"", ""Bot314dor/stabilityai-stable-diffusion-3-medium"", ""goodmai/stabilityai-stable-diffusion-3-medium"", ""Durev/stabilityai-stable-diffusion-3-medium"", ""Musimo/stabilityai-stable-diffusion-3-medium"", ""IwanY/stabilityai-stable-diffusion-3-medium"", ""immelstorun/stabilityai-stable-diffusion-3-medium"", ""guloff/stabilityai-stable-diffusion-3-medium"", ""dsdfstrger/stabilityai-stable-diffusion-3-medium"", ""KarmaAsatos/stabilityai-stable-diffusion-3-medium"", ""kjkjte/stabilityai-stable-diffusion-3-medium"", ""Shurley/stabilityai-stable-diffusion-3-medium"", ""davideleos/stabilityai-stable-diffusion-3-medium"", ""leobora/stabilityai-stable-diffusion-3-medium"", ""George12123009/stabilityai-stable-diffusion-3-medium"", ""dezole/stabilityai-stable-diffusion-3-medium"", ""Toniska/stabilityai-stable-diffusion-3-medium"", ""ewnewq/stabilityai-stable-diffusion-3-medium"", ""zacoje/stabilityai-stable-diffusion-3-medium"", ""Evgen58/stabilityai-stable-diffusion-3-medium"", ""Beeniebeen/stabilityai-stable-diffusion-3-medium"", ""lzzzzl/PS2-Filter-AI"", ""zhtr/stabilityai-stable-diffusion-3-medium"", ""Hothail/stabilityai-stable-diffusion-3-medium"", ""3ll107/stabilityai-stable-diffusion-3-medium"", ""FullyRendered/stabilityai-stable-diffusion-3-medium"", ""RonBiswas/stabilityai-stable-diffusion-3-medium"", ""broccy23/stabilityai-stable-diffusion-3-medium"", ""meraposter/stabilityai-stable-diffusion-3-medium"", ""Vagnus/stabilityai-stable-diffusion-3-medium"", ""sbdtadmin/stabilityai-stable-diffusion-3-medium"", ""Abhisksks/stabilityai-stable-diffusion-3-medium"", ""yu65701064/stabilityai-stable-diffusion-3-medium"", ""chama-x/stabilityai-stable-diffusion-3-medium"", ""Alex-Yan/stabilityai-stable-diffusion-3-medium"", ""tomxue/stabilityai-stable-diffusion-3-medium"", ""gergre7654/stabilityai-stable-diffusion-3-medium"", ""andiia/stabilityai-stable-diffusion-3-medium"", ""Creamyy/stabilityai-stable-diffusion-3-medium"", ""Nehal07/stabilityai-stable-diffusion-3-medium"", ""Romel123456/stabilityai-stable-diffusion-3-medium"", ""antonioevans/stabilityai-stable-diffusion-3-medium"", ""Abhishekabysm/stabilityai-stable-diffusion-3-medium"", ""ColinLee111/stabilityai-stable-diffusion-3-medium"", ""Henry1218/stabilityai-stable-diffusion-3-medium"", ""somvedaai/stabilityai-stable-diffusion-3-medium"", ""bojanstef/stabilityai-stable-diffusion-3-medium"", ""mindfox/stabilityai-stable-diffusion-3-medium"", ""paddy82/stabilityai-stable-diffusion-3-medium"", ""AayKC/stabilityai-stable-diffusion-3-medium"", ""valmont999/stabilityai-stable-diffusion-3-medium"", ""jitkost/stabilityai-stable-diffusion-3-medium"", ""aichampions/stable-diffusion-3-medium"", ""ozamyatin/stabilityai-stable-diffusion-3-medium"", ""Borboris/stabilityai-stable-diffusion-3-medium"", ""anakin52/stabilityai-stable-diffusion-3-medium"", ""Yura2112/ssd3medium""], ""safetensors"": null, ""security_repo_status"": null, ""lastModified"": ""2024-08-12 12:37:42+00:00"", ""cardData"": ""language:\n- en\nlicense: other\nlicense_name: stabilityai-ai-community\nlicense_link: LICENSE.md\npipeline_tag: text-to-image\ntags:\n- text-to-image\n- stable-diffusion\n- diffusion-single-file\ninference: false\nextra_gated_prompt: By clicking \""Agree\"", you agree to the [License Agreement](https://huggingface.co/stabilityai/stable-diffusion-3-medium/blob/main/LICENSE.md)\n  and acknowledge Stability AI's [Privacy Policy](https://stability.ai/privacy-policy).\nextra_gated_fields:\n  Name: text\n  Email: text\n  Country: country\n  Organization or Affiliation: text\n  Receive email updates and promotions on Stability AI products, services, and research?:\n    type: select\n    options:\n    - 'Yes'\n    - 'No'\n  I agree to the License Agreement and acknowledge Stability AI's Privacy Policy: checkbox"", ""transformersInfo"": null, ""_id"": ""66582ce552e752b1a72b985d"", ""modelId"": ""stabilityai/stable-diffusion-3-medium"", ""usedStorage"": 67448764458}",0,"https://huggingface.co/rain1011/pyramid-flow-sd3, https://huggingface.co/OPPOer/MultilingualSD3-adapter, https://huggingface.co/Dreyyt/Analog_Madness_Realistic_model, https://huggingface.co/vdo/pyramid-flow-sd3, https://huggingface.co/Ziyaad30/Pyramid-Flow-sd3, https://huggingface.co/boryanagm/beatrix_LoRA",6,"https://huggingface.co/jasperai/flash-sd3, https://huggingface.co/kttgms/test1, https://huggingface.co/Nestorthera/Titanic_Survival_Predictor, https://huggingface.co/gx123/test-model-1, https://huggingface.co/gx123/my-gx-sd-3, https://huggingface.co/Tsukasa0706/Char_Hutao, https://huggingface.co/Monkey23434242/Garfieldcomics, https://huggingface.co/Felix346/Rahul, https://huggingface.co/adedolllapo/MOBOLAJI, https://huggingface.co/Rgbeast5678/Nikoro, https://huggingface.co/Madyarfeyzi84/Z2, https://huggingface.co/Adam3/Michael-Kranz, https://huggingface.co/Hyype/Brandao085, https://huggingface.co/cali72mero/ai, https://huggingface.co/abhirajputnikku7/A, https://huggingface.co/ismalee/ismu1, https://huggingface.co/gonzalu/YFG-SushiStyle, https://huggingface.co/Shinhati2023/Jegan_Style, https://huggingface.co/ReverseTorque/Jejegev, https://huggingface.co/Goku355/Austin2024, https://huggingface.co/dexadeca99/codax99, https://huggingface.co/Artedaut/Parser, https://huggingface.co/Mahdi01/Dena_sd3, https://huggingface.co/dexadeca99/3dlorarcane, https://huggingface.co/SonicMations/Mason-Parkinson-FIXED, https://huggingface.co/Dolphinman2345/Eris_1, https://huggingface.co/hiperfire/outfit, https://huggingface.co/RAJKOT/1097145198, https://huggingface.co/Mari23/PistolPeteGoofTroop, https://huggingface.co/ekato/AiOtsuka, https://huggingface.co/ekato/ErikaIkuta, https://huggingface.co/ekato/adieu, https://huggingface.co/mol09/ari, https://huggingface.co/ekato/Acane, https://huggingface.co/SonicandTails/Perfect_Feet, https://huggingface.co/SonicandTails/Perfect_Feet_V2, https://huggingface.co/ekato/noa, https://huggingface.co/ekato/MoneKamishiraishi, https://huggingface.co/ElVallle24/RPGGAMES, https://huggingface.co/Cptthunder235/Over-the-mouth-gag, https://huggingface.co/ekato/TOMOO, https://huggingface.co/Mujeeb603/SD3-medium-Geometry-Diagrams-Lora-1, https://huggingface.co/ElTucuGardella/gastonlora, https://huggingface.co/ekato/ZUMA, https://huggingface.co/ekato/Aimyon, https://huggingface.co/ekato/n_buna, https://huggingface.co/Thihasoe/BabyDragon, https://huggingface.co/ekato/tuki, https://huggingface.co/Yuukinarak/ELEGANT, https://huggingface.co/00173R/0.12, https://huggingface.co/ekato/hikaruyamamoto, https://huggingface.co/AnsuFati10/ti, https://huggingface.co/ekato/ainatheend, https://huggingface.co/jimmyturlack/qr_code, https://huggingface.co/ekato/harukafukuhara, https://huggingface.co/pieman321/jill, https://huggingface.co/leonel4rd/nijiv6v4, https://huggingface.co/C0reami/XLsusjelomixV10_, https://huggingface.co/ekato/moeka, https://huggingface.co/cyberduck465/stable-diffusion, https://huggingface.co/Raylowx/Loraylow77, https://huggingface.co/sumanthkumar/lorali, https://huggingface.co/zerocool88/Skel, https://huggingface.co/bugsyjazz/Korilora, https://huggingface.co/Anonx7/anonx-annabell, https://huggingface.co/DerenXd/2HI0-XL, https://huggingface.co/Davidyulianto/Realistic_ChikMix, https://huggingface.co/Luo-Yihong/TDM_sd3_lora",68,"https://huggingface.co/second-state/stable-diffusion-3-medium-GGUF, https://huggingface.co/city96/stable-diffusion-3-medium-gguf, https://huggingface.co/ND911/stable-diffusion-3.5-medium-GGUF, https://huggingface.co/stabilityai/stable-diffusion-3-medium_amdgpu",4,,0,"AguaL/Illustrious-xl-early-release-v0, GPUModelSpotlight/Analysis-Of-Image-Song-Video-Prompts, Walid-Ahmed/image_gen, aipicasso/emi-3, alfredplpl/sd3-with-LLM, hf-demo-linux/sili, kasper-boy/Transform_Ordinary_Photos_into_Extraordinary_Art, madebyollin/sd3-with-taesd3-previews, rphrp1985/stable-diffusion-3-medium, stabilityai/stable-diffusion-3-medium, yangtb24/sone, yangtb24/sone-latest",12
rain1011/pyramid-flow-sd3,"---
license: other
license_name: stabilityai-ai-community
license_link: LICENSE.md
base_model:
- stabilityai/stable-diffusion-3-medium
pipeline_tag: text-to-video
tags:
- image-to-video
- sd3

---

# ⚡️Pyramid Flow SD3⚡️

[[Paper]](https://arxiv.org/abs/2410.05954) [[Project Page ✨]](https://pyramid-flow.github.io) [[Code 🚀]](https://github.com/jy0205/Pyramid-Flow) [[miniFLUX Model ⚡️]](https://huggingface.co/rain1011/pyramid-flow-miniflux) [[demo 🤗](https://huggingface.co/spaces/Pyramid-Flow/pyramid-flow)]

This is the model repository for Pyramid Flow, a training-efficient **Autoregressive Video Generation** method based on **Flow Matching**. By training only on open-source datasets, it generates high-quality 10-second videos at 768p resolution and 24 FPS, and naturally supports image-to-video generation.

<table class=""center"" border=""0"" style=""width: 100%; text-align: left;"">
<tr>
  <th>10s, 768p, 24fps</th>
  <th>5s, 768p, 24fps</th>
  <th>Image-to-video</th>
</tr>
<tr>
  <td><video src=""https://pyramid-flow.github.io/static/videos/t2v_10s/fireworks.mp4"" autoplay muted loop playsinline></video></td>
  <td><video src=""https://pyramid-flow.github.io/static/videos/t2v/trailer.mp4"" autoplay muted loop playsinline></video></td>
  <td><video src=""https://pyramid-flow.github.io/static/videos/i2v/sunday.mp4"" autoplay muted loop playsinline></video></td>
</tr>
</table>


## News

* `2024.10.29` ⚡️⚡️⚡️ We release [training code](https://github.com/jy0205/Pyramid-Flow?tab=readme-ov-file#training) and [new model checkpoints](https://huggingface.co/rain1011/pyramid-flow-miniflux) with FLUX structure trained from scratch.

  > We have switched the model structure from SD3 to a mini FLUX to fix human structure issues, please try our 1024p image checkpoint and 384p video checkpoint. We will release 768p video checkpoint in a few days.

* `2024.10.11`  🤗🤗🤗 [Hugging Face demo](https://huggingface.co/spaces/Pyramid-Flow/pyramid-flow) is available. Thanks [@multimodalart](https://huggingface.co/multimodalart) for the commit! 

* `2024.10.10`  🚀🚀🚀 We release the [technical report](https://arxiv.org/abs/2410.05954), [project page](https://pyramid-flow.github.io) and [model checkpoint](https://huggingface.co/rain1011/pyramid-flow-sd3) of Pyramid Flow.

## Installation

We recommend setting up the environment with conda. The codebase currently uses Python 3.8.10 and PyTorch 2.1.2, and we are actively working to support a wider range of versions.

```bash
git clone https://github.com/jy0205/Pyramid-Flow
cd Pyramid-Flow

# create env using conda
conda create -n pyramid python==3.8.10
conda activate pyramid
pip install -r requirements.txt
```

Then, download the model from [Huggingface](https://huggingface.co/rain1011) (there are two variants: [miniFLUX](https://huggingface.co/rain1011/pyramid-flow-miniflux) or [SD3](https://huggingface.co/rain1011/pyramid-flow-sd3)). The miniFLUX models support 1024p image and 384p video generation, and the SD3-based models support 768p and 384p video generation. The 384p checkpoint generates 5-second video at 24FPS, while the 768p checkpoint generates up to 10-second video at 24FPS.

```python
from huggingface_hub import snapshot_download

model_path = 'PATH'   # The local directory to save downloaded checkpoint
snapshot_download(""rain1011/pyramid-flow-sd3"", local_dir=model_path, local_dir_use_symlinks=False, repo_type='model')
```

## Usage

For inference, we provide Gradio demo, single-GPU, multi-GPU, and Apple Silicon inference code, as well as VRAM-efficient features such as CPU offloading. Please check our [code repository](https://github.com/jy0205/Pyramid-Flow?tab=readme-ov-file#inference) for usage.

Below is a simplified two-step usage procedure. First, load the downloaded model:

```python
import torch
from PIL import Image
from pyramid_dit import PyramidDiTForVideoGeneration
from diffusers.utils import load_image, export_to_video

torch.cuda.set_device(0)
model_dtype, torch_dtype = 'bf16', torch.bfloat16   # Use bf16 (not support fp16 yet)

model = PyramidDiTForVideoGeneration(
    'PATH',                                         # The downloaded checkpoint dir
    model_dtype,
    model_variant='diffusion_transformer_768p',     # 'diffusion_transformer_384p'
)

model.vae.enable_tiling()
# model.vae.to(""cuda"")
# model.dit.to(""cuda"")
# model.text_encoder.to(""cuda"")

# if you're not using sequential offloading bellow uncomment the lines above ^
model.enable_sequential_cpu_offload()
```

Then, you can try text-to-video generation on your own prompts:

```python
prompt = ""A movie trailer featuring the adventures of the 30 year old space man wearing a red wool knitted motorcycle helmet, blue sky, salt desert, cinematic style, shot on 35mm film, vivid colors""

with torch.no_grad(), torch.cuda.amp.autocast(enabled=True, dtype=torch_dtype):
    frames = model.generate(
        prompt=prompt,
        num_inference_steps=[20, 20, 20],
        video_num_inference_steps=[10, 10, 10],
        height=768,     
        width=1280,
        temp=16,                    # temp=16: 5s, temp=31: 10s
        guidance_scale=9.0,         # The guidance for the first frame, set it to 7 for 384p variant
        video_guidance_scale=5.0,   # The guidance for the other video latent
        output_type=""pil"",
        save_memory=True,           # If you have enough GPU memory, set it to `False` to improve vae decoding speed
    )

export_to_video(frames, ""./text_to_video_sample.mp4"", fps=24)
```

As an autoregressive model, our model also supports (text conditioned) image-to-video generation:

```python
image = Image.open('assets/the_great_wall.jpg').convert(""RGB"").resize((1280, 768))
prompt = ""FPV flying over the Great Wall""

with torch.no_grad(), torch.cuda.amp.autocast(enabled=True, dtype=torch_dtype):
    frames = model.generate_i2v(
        prompt=prompt,
        input_image=image,
        num_inference_steps=[10, 10, 10],
        temp=16,
        video_guidance_scale=4.0,
        output_type=""pil"",
        save_memory=True,           # If you have enough GPU memory, set it to `False` to improve vae decoding speed
    )

export_to_video(frames, ""./image_to_video_sample.mp4"", fps=24)
```

## Usage tips

* The `guidance_scale` parameter controls the visual quality. We suggest using a guidance within [7, 9] for the 768p checkpoint during text-to-video generation, and 7 for the 384p checkpoint.
* The `video_guidance_scale` parameter controls the motion. A larger value increases the dynamic degree and mitigates the autoregressive generation degradation, while a smaller value stabilizes the video.
* For 10-second video generation, we recommend using a guidance scale of 7 and a video guidance scale of 5.

## Gallery

The following video examples are generated at 5s, 768p, 24fps. For more results, please visit our [project page](https://pyramid-flow.github.io).

<table class=""center"" border=""0"" style=""width: 100%; text-align: left;"">
<tr>
  <td><video src=""https://pyramid-flow.github.io/static/videos/t2v/tokyo.mp4"" autoplay muted loop playsinline></video></td>
  <td><video src=""https://pyramid-flow.github.io/static/videos/t2v/eiffel.mp4"" autoplay muted loop playsinline></video></td>
</tr>
<tr>
  <td><video src=""https://pyramid-flow.github.io/static/videos/t2v/waves.mp4"" autoplay muted loop playsinline></video></td>
  <td><video src=""https://pyramid-flow.github.io/static/videos/t2v/rail.mp4"" autoplay muted loop playsinline></video></td>
</tr>
</table>


## Acknowledgement

We are grateful for the following awesome projects when implementing Pyramid Flow:

* [SD3 Medium](https://huggingface.co/stabilityai/stable-diffusion-3-medium) and [Flux 1.0](https://huggingface.co/black-forest-labs/FLUX.1-dev): State-of-the-art image generation models based on flow matching.
* [Diffusion Forcing](https://boyuan.space/diffusion-forcing) and [GameNGen](https://gamengen.github.io): Next-token prediction meets full-sequence diffusion.
* [WebVid-10M](https://github.com/m-bain/webvid), [OpenVid-1M](https://github.com/NJU-PCALab/OpenVid-1M) and [Open-Sora Plan](https://github.com/PKU-YuanGroup/Open-Sora-Plan): Large-scale datasets for text-to-video generation.
* [CogVideoX](https://github.com/THUDM/CogVideo): An open-source text-to-video generation model that shares many training details.
* [Video-LLaMA2](https://github.com/DAMO-NLP-SG/VideoLLaMA2): An open-source video LLM for our video recaptioning.

## Citation

Consider giving this repository a star and cite Pyramid Flow in your publications if it helps your research.

```
@article{jin2024pyramidal,
  title={Pyramidal Flow Matching for Efficient Video Generative Modeling},
  author={Jin, Yang and Sun, Zhicheng and Li, Ningyuan and Xu, Kun and Xu, Kun and Jiang, Hao and Zhuang, Nan and Huang, Quzhe and Song, Yang and Mu, Yadong and Lin, Zhouchen},
  jounal={arXiv preprint arXiv:2410.05954},
  year={2024}
}
```","{""id"": ""rain1011/pyramid-flow-sd3"", ""author"": ""rain1011"", ""sha"": ""a47c8ee2cbeda5813be9bc2bf67bc52ee6698ab3"", ""last_modified"": ""2024-10-30 03:55:43+00:00"", ""created_at"": ""2024-10-09 12:44:41+00:00"", ""private"": false, ""gated"": false, ""disabled"": false, ""downloads"": 0, ""downloads_all_time"": null, ""likes"": 825, ""library_name"": ""diffusers"", ""gguf"": null, ""inference"": null, ""tags"": [""diffusers"", ""safetensors"", ""image-to-video"", ""sd3"", ""text-to-video"", ""arxiv:2410.05954"", ""base_model:stabilityai/stable-diffusion-3-medium"", ""base_model:finetune:stabilityai/stable-diffusion-3-medium"", ""license:other"", ""region:us""], ""pipeline_tag"": ""text-to-video"", ""mask_token"": null, ""trending_score"": null, ""card_data"": ""base_model:\n- stabilityai/stable-diffusion-3-medium\nlicense: other\nlicense_name: stabilityai-ai-community\nlicense_link: LICENSE.md\npipeline_tag: text-to-video\ntags:\n- image-to-video\n- sd3"", ""widget_data"": null, ""model_index"": null, ""config"": null, ""transformers_info"": null, ""siblings"": [""RepoSibling(rfilename='.gitattributes', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='LICENSE.md', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='README.md', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='causal_video_vae/config.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='causal_video_vae/diffusion_pytorch_model.safetensors', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='diffusion_transformer_384p/config.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='diffusion_transformer_384p/diffusion_pytorch_model.safetensors', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='diffusion_transformer_768p/config.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='diffusion_transformer_768p/diffusion_pytorch_model.safetensors', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='text_encoder/config.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='text_encoder/model.safetensors', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='text_encoder_2/config.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='text_encoder_2/model.safetensors', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='text_encoder_3/config.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='text_encoder_3/model-00001-of-00002.safetensors', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='text_encoder_3/model-00002-of-00002.safetensors', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='text_encoder_3/model.safetensors.index.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer/merges.txt', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer/special_tokens_map.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer/tokenizer_config.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer/vocab.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer_2/merges.txt', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer_2/special_tokens_map.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer_2/tokenizer_config.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer_2/vocab.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer_3/special_tokens_map.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer_3/spiece.model', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer_3/tokenizer.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer_3/tokenizer_config.json', size=None, blob_id=None, lfs=None)""], ""spaces"": [""Pyramid-Flow/pyramid-flow"", ""sofianhw/pyramid-flow"", ""AI-Platform/pyramid-flow"", ""yasserrmd/pyramid-flow"", ""Nymbo/pyramid-flow"", ""melromyeah/pyramid-flow"", ""snyderline/pyramid-flow"", ""Raider606/pyramid-flow"", ""Slayerfryed44/pyramid-flow"", ""victim2910/pyramid-flow"", ""diky13/pyramid-flow"", ""coollsd/pyramid-flow"", ""waloneai/pyramid-flow"", ""qrqode/pyramid-flow"", ""hakem32/pyramid-flow"", ""Igogogor/pyramid-flow"", ""henry1962/pyramid-flow"", ""waloneai/wlmov"", ""carpit680/pyramid-flow"", ""lilmeaty/pyramid-flow"", ""adl5423/VideoGeneratorCodaKid"", ""thesab/pyramid-flow-hf"", ""aripsam44/pyramid-flow"", ""sironagasuyagi/Pyramid-Flow"", ""shaiws/pyramid-flow"", ""K00B404/vid_maybe"", ""Gathubaze/pyramid-flow"", ""jcudit/pyramid-flow"", ""CShah2218/Text-Image-To-Video""], ""safetensors"": null, ""security_repo_status"": null, ""lastModified"": ""2024-10-30 03:55:43+00:00"", ""cardData"": ""base_model:\n- stabilityai/stable-diffusion-3-medium\nlicense: other\nlicense_name: stabilityai-ai-community\nlicense_link: LICENSE.md\npipeline_tag: text-to-video\ntags:\n- image-to-video\n- sd3"", ""transformersInfo"": null, ""_id"": ""67067ab9dc08442956a2d518"", ""modelId"": ""rain1011/pyramid-flow-sd3"", ""usedStorage"": 52046558470}",1,"https://huggingface.co/SeanScripts/pyramid-flow-sd3-bf16, https://huggingface.co/Flit/g",2,,0,,0,https://huggingface.co/bkbj/Atest,1,"AI-Platform/pyramid-flow, Nymbo/pyramid-flow, Pyramid-Flow/pyramid-flow, Raider606/pyramid-flow, Slayerfryed44/pyramid-flow, coollsd/pyramid-flow, diky13/pyramid-flow, huggingface/InferenceSupport/discussions/new?title=rain1011/pyramid-flow-sd3&description=React%20to%20this%20comment%20with%20an%20emoji%20to%20vote%20for%20%5Brain1011%2Fpyramid-flow-sd3%5D(%2Frain1011%2Fpyramid-flow-sd3)%20to%20be%20supported%20by%20Inference%20Providers.%0A%0A(optional)%20Which%20providers%20are%20you%20interested%20in%3F%20(Novita%2C%20Hyperbolic%2C%20Together%E2%80%A6)%0A, melromyeah/pyramid-flow, snyderline/pyramid-flow, sofianhw/pyramid-flow, victim2910/pyramid-flow, yasserrmd/pyramid-flow",13
SeanScripts/pyramid-flow-sd3-bf16,"---
base_model:
- rain1011/pyramid-flow-sd3
pipeline_tag: text-to-video
library_name: diffusers
---

Converted to bfloat16 from [rain1011/pyramid-flow-sd3](https://huggingface.co/rain1011/pyramid-flow-sd3). Use the text encoders and tokenizers from that repo (or from SD3), no point reuploading them over and over unchanged.

Inference code is available here: [github.com/jy0205/Pyramid-Flow](https://github.com/jy0205/Pyramid-Flow/tree/main).

Both 384p and 768p work on 24 GB VRAM. For 16 steps (5 second video), 384p takes a little over a minute on a 3090, and 768p takes about 7 minutes. For 31 steps (10 second video), 384p took about 10 minutes.

I highly recommend using `cpu_offloading=True` when generating, unless you have more than 24 GB VRAM.","{""id"": ""SeanScripts/pyramid-flow-sd3-bf16"", ""author"": ""SeanScripts"", ""sha"": ""18324600d73741033657f28004c63c9bac51832f"", ""last_modified"": ""2024-10-12 05:32:42+00:00"", ""created_at"": ""2024-10-10 20:32:17+00:00"", ""private"": false, ""gated"": false, ""disabled"": false, ""downloads"": 0, ""downloads_all_time"": null, ""likes"": 11, ""library_name"": ""diffusers"", ""gguf"": null, ""inference"": null, ""tags"": [""diffusers"", ""safetensors"", ""text-to-video"", ""base_model:rain1011/pyramid-flow-sd3"", ""base_model:finetune:rain1011/pyramid-flow-sd3"", ""region:us""], ""pipeline_tag"": ""text-to-video"", ""mask_token"": null, ""trending_score"": null, ""card_data"": ""base_model:\n- rain1011/pyramid-flow-sd3\nlibrary_name: diffusers\npipeline_tag: text-to-video"", ""widget_data"": null, ""model_index"": null, ""config"": null, ""transformers_info"": null, ""siblings"": [""RepoSibling(rfilename='.gitattributes', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='LICENSE.md', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='README.md', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='causal_video_vae/config.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='causal_video_vae/diffusion_pytorch_model.safetensors', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='diffusion_transformer_384p/config.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='diffusion_transformer_384p/diffusion_pytorch_model.safetensors', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='diffusion_transformer_768p/config.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='diffusion_transformer_768p/diffusion_pytorch_model.safetensors', size=None, blob_id=None, lfs=None)""], ""spaces"": [], ""safetensors"": null, ""security_repo_status"": null, ""lastModified"": ""2024-10-12 05:32:42+00:00"", ""cardData"": ""base_model:\n- rain1011/pyramid-flow-sd3\nlibrary_name: diffusers\npipeline_tag: text-to-video"", ""transformersInfo"": null, ""_id"": ""670839d19ae661eabe563260"", ""modelId"": ""SeanScripts/pyramid-flow-sd3-bf16"", ""usedStorage"": 9010845134}",2,,0,,0,,0,,0,huggingface/InferenceSupport/discussions/new?title=SeanScripts/pyramid-flow-sd3-bf16&description=React%20to%20this%20comment%20with%20an%20emoji%20to%20vote%20for%20%5BSeanScripts%2Fpyramid-flow-sd3-bf16%5D(%2FSeanScripts%2Fpyramid-flow-sd3-bf16)%20to%20be%20supported%20by%20Inference%20Providers.%0A%0A(optional)%20Which%20providers%20are%20you%20interested%20in%3F%20(Novita%2C%20Hyperbolic%2C%20Together%E2%80%A6)%0A,1
Flit/g,"---
license: mit
datasets:
- neuralwork/arxiver
language:
- ab
metrics:
- bleu
base_model:
- rain1011/pyramid-flow-sd3
new_version: stabilityai/stable-diffusion-3.5-large
pipeline_tag: translation
library_name: allennlp
tags:
- finance
---","{""id"": ""Flit/g"", ""author"": ""Flit"", ""sha"": ""9f799d17fb1d58b2d39f3f973e8467ed7ff20c43"", ""last_modified"": ""2024-10-27 17:38:08+00:00"", ""created_at"": ""2024-10-27 17:37:40+00:00"", ""private"": false, ""gated"": false, ""disabled"": false, ""downloads"": 0, ""downloads_all_time"": null, ""likes"": 0, ""library_name"": ""allennlp"", ""gguf"": null, ""inference"": null, ""tags"": [""allennlp"", ""finance"", ""translation"", ""ab"", ""dataset:neuralwork/arxiver"", ""base_model:rain1011/pyramid-flow-sd3"", ""base_model:finetune:rain1011/pyramid-flow-sd3"", ""license:mit"", ""region:us""], ""pipeline_tag"": ""translation"", ""mask_token"": null, ""trending_score"": null, ""card_data"": ""base_model:\n- rain1011/pyramid-flow-sd3\ndatasets:\n- neuralwork/arxiver\nlanguage:\n- ab\nlibrary_name: allennlp\nlicense: mit\nmetrics:\n- bleu\npipeline_tag: translation\ntags:\n- finance\nnew_version: stabilityai/stable-diffusion-3.5-large"", ""widget_data"": null, ""model_index"": null, ""config"": null, ""transformers_info"": null, ""siblings"": [""RepoSibling(rfilename='.gitattributes', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='README.md', size=None, blob_id=None, lfs=None)""], ""spaces"": [], ""safetensors"": null, ""security_repo_status"": null, ""lastModified"": ""2024-10-27 17:38:08+00:00"", ""cardData"": ""base_model:\n- rain1011/pyramid-flow-sd3\ndatasets:\n- neuralwork/arxiver\nlanguage:\n- ab\nlibrary_name: allennlp\nlicense: mit\nmetrics:\n- bleu\npipeline_tag: translation\ntags:\n- finance\nnew_version: stabilityai/stable-diffusion-3.5-large"", ""transformersInfo"": null, ""_id"": ""671e7a64a2d95e235ac86816"", ""modelId"": ""Flit/g"", ""usedStorage"": 0}",2,,0,,0,,0,,0,huggingface/InferenceSupport/discussions/new?title=Flit/g&description=React%20to%20this%20comment%20with%20an%20emoji%20to%20vote%20for%20%5BFlit%2Fg%5D(%2FFlit%2Fg)%20to%20be%20supported%20by%20Inference%20Providers.%0A%0A(optional)%20Which%20providers%20are%20you%20interested%20in%3F%20(Novita%2C%20Hyperbolic%2C%20Together%E2%80%A6)%0A,1
OPPOer/MultilingualSD3-adapter,"---
license: apache-2.0
language:
- zh
base_model:
- stabilityai/stable-diffusion-3-medium
pipeline_tag: text-to-image
---


![FLUX.1 [schnell] Grid](./PEA-Diffusion.png)

`MultilingualSD3-adapter` is a multilingual adapter tailored for the [SD3](https://huggingface.co/stabilityai/stable-diffusion-3-medium). Originating from an ECCV 2024 paper titled [PEA-Diffusion](https://arxiv.org/abs/2311.17086). The open-source code is available at https://github.com/OPPO-Mente-Lab/PEA-Diffusion.


# Usage
We used the multilingual encoder [umt5-xxl](https://huggingface.co/google/umt5-xxl),[Mul-OpenCLIP](https://huggingface.co/laion/CLIP-ViT-H-14-frozen-xlm-roberta-large-laion5B-s13B-b90k) and [HunyuanDiT_CLIP](https://huggingface.co/Tencent-Hunyuan/HunyuanDiT/tree/main/t2i). We implemented a reverse denoising process for distillation training. 


## `MultilingualSD3`


```python
import os
import torch
import torch.nn as nn

from typing import Any, Callable, Dict, List, Optional, Union
import inspect
from diffusers.models.transformers import SD3Transformer2DModel
from diffusers.image_processor import VaeImageProcessor
from diffusers.schedulers import FlowMatchEulerDiscreteScheduler
from diffusers import AutoencoderKL
from tqdm import tqdm
from PIL import Image

from transformers import T5Tokenizer,T5EncoderModel,BertModel, BertTokenizer
import open_clip


class MLP(nn.Module):
    def __init__(self, in_dim=1024, out_dim=2048, hidden_dim=2048, out_dim1=4096, use_residual=True):
        super().__init__()
        if use_residual:
            assert in_dim == out_dim
        self.layernorm = nn.LayerNorm(in_dim)
        self.projector = nn.Sequential(
            nn.Linear(in_dim, hidden_dim, bias=False),
            nn.GELU(),
            nn.Linear(hidden_dim, hidden_dim, bias=False),
            nn.GELU(),
            nn.Linear(hidden_dim, hidden_dim, bias=False),
            nn.GELU(),
            nn.Linear(hidden_dim, out_dim, bias=False),
        )
        self.fc = nn.Linear(out_dim, out_dim1)
        self.use_residual = use_residual
    def forward(self, x):
        residual = x
        x = self.layernorm(x)
        x = self.projector(x)
        x2 = nn.GELU()(x)
        x2 = self.fc(x2)
        return x2

class Transformer(nn.Module):
    def __init__(self, d_model,  n_heads, out_dim1, out_dim2,num_layers=1) -> None:
        super().__init__()

        self.encoder_layer = nn.TransformerEncoderLayer(d_model=d_model, nhead=n_heads, dim_feedforward=2048, batch_first=True)
        self.transformer_encoder = nn.TransformerEncoder(self.encoder_layer, num_layers=num_layers)
        self.linear1 = nn.Linear(d_model, out_dim1)
        self.linear2 = nn.Linear(d_model, out_dim2)
    
    def forward(self, x):
        x = self.transformer_encoder(x)
        x1 = self.linear1(x)
        x1 = torch.mean(x1,1)
        x2 = self.linear2(x)
        return x1,x2


def image_grid(imgs, rows, cols):
    assert len(imgs) == rows*cols

    w, h = imgs[0].size
    grid = Image.new('RGB', size=(cols*w, rows*h))
    grid_w, grid_h = grid.size

    for i, img in enumerate(imgs):
        grid.paste(img, box=(i%cols*w, i//cols*h))
    return grid
def retrieve_timesteps(
    scheduler,
    num_inference_steps: Optional[int] = None,
    device: Optional[Union[str, torch.device]] = None,
    timesteps: Optional[List[int]] = None,
    sigmas: Optional[List[float]] = None,
    **kwargs,
):
    if timesteps is not None and sigmas is not None:
        raise ValueError(""Only one of `timesteps` or `sigmas` can be passed. Please choose one to set custom values"")
    if timesteps is not None:
        accepts_timesteps = ""timesteps"" in set(inspect.signature(scheduler.set_timesteps).parameters.keys())
        if not accepts_timesteps:
            raise ValueError(
                f""The current scheduler class {scheduler.__class__}'s `set_timesteps` does not support custom""
                f"" timestep schedules. Please check whether you are using the correct scheduler.""
            )
        scheduler.set_timesteps(timesteps=timesteps, device=device, **kwargs)
        timesteps = scheduler.timesteps
        num_inference_steps = len(timesteps)
    elif sigmas is not None:
        accept_sigmas = ""sigmas"" in set(inspect.signature(scheduler.set_timesteps).parameters.keys())
        if not accept_sigmas:
            raise ValueError(
                f""The current scheduler class {scheduler.__class__}'s `set_timesteps` does not support custom""
                f"" sigmas schedules. Please check whether you are using the correct scheduler.""
            )
        scheduler.set_timesteps(sigmas=sigmas, device=device, **kwargs)
        timesteps = scheduler.timesteps
        num_inference_steps = len(timesteps)
    else:
        scheduler.set_timesteps(num_inference_steps, device=device, **kwargs)
        timesteps = scheduler.timesteps
    return timesteps, num_inference_steps

class StableDiffusionTest():
    def __init__(self,model_path,text_encoder_path,text_encoder_path1,text_encoder_path2,proj_path,proj_t5_path):
        super().__init__()
        self.transformer = SD3Transformer2DModel.from_pretrained(model_path, subfolder=""transformer"",torch_dtype=dtype).to(device)
        self.vae = AutoencoderKL.from_pretrained(model_path, subfolder=""vae"").to(device,dtype=dtype)
        self.scheduler = FlowMatchEulerDiscreteScheduler.from_pretrained(model_path, subfolder=""scheduler"")

        self.vae_scale_factor = (
            2 ** (len(self.vae.config.block_out_channels) - 1) if hasattr(self, ""vae"") and self.vae is not None else 8
        )
        self.image_processor = VaeImageProcessor(vae_scale_factor=self.vae_scale_factor)
        self.default_sample_size = (
            self.transformer.config.sample_size
            if hasattr(self, ""transformer"") and self.transformer is not None
            else 128
        )

        self.text_encoder_t5 = T5EncoderModel.from_pretrained(text_encoder_path).to(device,dtype=dtype)
        self.tokenizer_t5 = T5Tokenizer.from_pretrained(text_encoder_path)
        self.text_encoder = BertModel.from_pretrained(f""{text_encoder_path1}/clip_text_encoder"", False, revision=None).to(device,dtype=dtype)
        self.tokenizer = BertTokenizer.from_pretrained(f""{text_encoder_path1}/tokenizer"")

        self.text_encoder2, _, _ = open_clip.create_model_and_transforms('xlm-roberta-large-ViT-H-14', pretrained=text_encoder_path2)
        self.tokenizer2 = open_clip.get_tokenizer('xlm-roberta-large-ViT-H-14')
        self.text_encoder2.text.output_tokens = True
        self.text_encoder2 = self.text_encoder2.to(device,dtype=dtype)

        self.proj = MLP(2048, 2048, 2048, 4096, use_residual=False).to(device,dtype=dtype)
        self.proj.load_state_dict(torch.load(proj_path, map_location=""cpu""))
        self.proj_t5 = Transformer(d_model=4096, n_heads=8, out_dim1=2048, out_dim2=4096).to(device,dtype=dtype)
        self.proj_t5.load_state_dict(torch.load(proj_t5_path, map_location=""cpu""))

    def encode_prompt(self, prompt, device, do_classifier_free_guidance=True, negative_prompt=None):
        batch_size = len(prompt) if isinstance(prompt, list) else 1
        text_input_ids_t5 = self.tokenizer_t5(
            prompt,
            padding=""max_length"",
            max_length=77,
            truncation=True,
            add_special_tokens=False,
            return_tensors=""pt"",
        ).input_ids.to(device)

        text_embeddings = self.text_encoder_t5(text_input_ids_t5)
        text_inputs = self.tokenizer(
            prompt,
            padding=""max_length"",
            max_length=77,
            truncation=True,
            return_tensors=""pt"",
        )
        input_ids = text_inputs.input_ids.to(device)
        attention_mask = text_inputs.attention_mask.to(device)
        encoder_hidden_states  = self.text_encoder(input_ids,attention_mask=attention_mask)[0]
        text_input_ids = self.tokenizer2(prompt).to(device)
        _,encoder_hidden_states2  = self.text_encoder2.encode_text(text_input_ids)
        encoder_hidden_states = torch.cat([encoder_hidden_states, encoder_hidden_states2], dim=-1)

        encoder_hidden_states_t5 = text_embeddings[0]
        encoder_hidden_states = self.proj(encoder_hidden_states)

        add_text_embeds,encoder_hidden_states_t5 = self.proj_t5(encoder_hidden_states_t5.half())
        prompt_embeds = torch.cat([encoder_hidden_states, encoder_hidden_states_t5], dim=-2) 

        # get unconditional embeddings for classifier free guidance
        if do_classifier_free_guidance:
            if negative_prompt is None:
                uncond_tokens = [""""] * batch_size
            else:
                uncond_tokens = negative_prompt
            text_input_ids_t5 = self.tokenizer_t5(
                uncond_tokens,
                padding=""max_length"",
                max_length=77,
                truncation=True,
                add_special_tokens=False,
                return_tensors=""pt"",
            ).input_ids.to(device)

            text_embeddings = self.text_encoder_t5(text_input_ids_t5)
            text_inputs = self.tokenizer(
                uncond_tokens,
                padding=""max_length"",
                max_length=77,
                truncation=True,
                return_tensors=""pt"",
            )
            input_ids = text_inputs.input_ids.to(device)
            attention_mask = text_inputs.attention_mask.to(device)
            encoder_hidden_states  = self.text_encoder(input_ids,attention_mask=attention_mask)[0]

            text_input_ids = self.tokenizer2(uncond_tokens).to(device)
            _,encoder_hidden_states2  = self.text_encoder2.encode_text(text_input_ids)
            encoder_hidden_states = torch.cat([encoder_hidden_states, encoder_hidden_states2], dim=-1)

            encoder_hidden_states_t5 = text_embeddings[0]
            encoder_hidden_states_uncond = self.proj(encoder_hidden_states)
 
            add_text_embeds_uncond,encoder_hidden_states_t5_uncond = self.proj_t5(encoder_hidden_states_t5.half())
            prompt_embeds_uncond = torch.cat([encoder_hidden_states_uncond, encoder_hidden_states_t5_uncond], dim=-2)

            prompt_embeds = torch.cat([prompt_embeds_uncond, prompt_embeds], dim=0)
            pooled_prompt_embeds = torch.cat([add_text_embeds_uncond, add_text_embeds], dim=0)

        return prompt_embeds,pooled_prompt_embeds


    def prepare_latents(
        self,
        batch_size,
        num_channels_latents,
        height,
        width,
        dtype,
        device,
        generator,
        latents=None,
    ):
        if latents is not None:
            return latents.to(device=device, dtype=dtype)

        shape = (
            batch_size,
            num_channels_latents,
            int(height) // self.vae_scale_factor,
            int(width) // self.vae_scale_factor,
        )

        if isinstance(generator, list) and len(generator) != batch_size:
            raise ValueError(
                f""You have passed a list of generators of length {len(generator)}, but requested an effective batch""
                f"" size of {batch_size}. Make sure the batch size matches the length of the generators.""
            )

        latents = torch.randn(shape, generator=generator, dtype=dtype).to(device)

        return latents

    @property
    def guidance_scale(self):
        return self._guidance_scale

    @property
    def clip_skip(self):
        return self._clip_skip

    # here `guidance_scale` is defined analog to the guidance weight `w` of equation (2)
    # of the Imagen paper: https://arxiv.org/pdf/2205.11487.pdf . `guidance_scale = 1`
    # corresponds to doing no classifier free guidance.
    @property
    def do_classifier_free_guidance(self):
        return self._guidance_scale > 1

    @property
    def joint_attention_kwargs(self):
        return self._joint_attention_kwargs

    @property
    def num_timesteps(self):
        return self._num_timesteps

    @property
    def interrupt(self):
        return self._interrupt

    @torch.no_grad()
    def __call__(
        self,
        prompt: Union[str, List[str]] = None,
        prompt_2: Optional[Union[str, List[str]]] = None,
        prompt_3: Optional[Union[str, List[str]]] = None,
        height: Optional[int] = None,
        width: Optional[int] = None,
        num_inference_steps: int = 28,
        timesteps: List[int] = None,
        guidance_scale: float = 7.0,
        negative_prompt: Optional[Union[str, List[str]]] = None,
        negative_prompt_2: Optional[Union[str, List[str]]] = None,
        negative_prompt_3: Optional[Union[str, List[str]]] = None,
        num_images_per_prompt: Optional[int] = 1,
        generator: Optional[Union[torch.Generator, List[torch.Generator]]] = None,
        latents: Optional[torch.FloatTensor] = None,
        prompt_embeds: Optional[torch.FloatTensor] = None,
        negative_prompt_embeds: Optional[torch.FloatTensor] = None,
        pooled_prompt_embeds: Optional[torch.FloatTensor] = None,
        negative_pooled_prompt_embeds: Optional[torch.FloatTensor] = None,
        output_type: Optional[str] = ""pil"",
        return_dict: bool = True,
        joint_attention_kwargs: Optional[Dict[str, Any]] = None,
        clip_skip: Optional[int] = None,
        callback_on_step_end: Optional[Callable[[int, int, Dict], None]] = None,
        callback_on_step_end_tensor_inputs: List[str] = [""latents""],
    ):
        height = height or self.default_sample_size * self.vae_scale_factor
        width = width or self.default_sample_size * self.vae_scale_factor

        self._guidance_scale = guidance_scale
        self._clip_skip = clip_skip
        self._joint_attention_kwargs = joint_attention_kwargs
        self._interrupt = False

        if prompt is not None and isinstance(prompt, str):
            batch_size = 1
        elif prompt is not None and isinstance(prompt, list):
            batch_size = len(prompt)
        else:
            batch_size = prompt_embeds.shape[0]


        prompt_embeds,pooled_prompt_embeds = self.encode_prompt(prompt, device)

        timesteps, num_inference_steps = retrieve_timesteps(self.scheduler, num_inference_steps, device, timesteps)
        num_warmup_steps = max(len(timesteps) - num_inference_steps * self.scheduler.order, 0)
        self._num_timesteps = len(timesteps)

        num_channels_latents = self.transformer.config.in_channels
        latents = self.prepare_latents(
            batch_size * num_images_per_prompt,
            num_channels_latents,
            height,
            width,
            prompt_embeds.dtype,
            device,
            generator,
            latents,
        )

        for i, t in tqdm(enumerate(timesteps)):
            if self.interrupt:
                continue
            latent_model_input = torch.cat([latents] * 2) if self.do_classifier_free_guidance else latents
            timestep = t.expand(latent_model_input.shape[0]).to(dtype=dtype)

            noise_pred = self.transformer(
                hidden_states=latent_model_input,
                timestep=timestep,
                encoder_hidden_states=prompt_embeds.to(dtype=self.transformer.dtype),
                pooled_projections=pooled_prompt_embeds.to(dtype=self.transformer.dtype),
                joint_attention_kwargs=self.joint_attention_kwargs,
                return_dict=False,
            )[0]

            if self.do_classifier_free_guidance:
                noise_pred_uncond, noise_pred_text = noise_pred.chunk(2)
                noise_pred = noise_pred_uncond + self.guidance_scale * (noise_pred_text - noise_pred_uncond)

            latents_dtype = latents.dtype
            latents = self.scheduler.step(noise_pred, t, latents, return_dict=False)[0]

            if latents.dtype != latents_dtype:
                if torch.backends.mps.is_available():
                    latents = latents.to(latents_dtype)

            if callback_on_step_end is not None:
                callback_kwargs = {}
                for k in callback_on_step_end_tensor_inputs:
                    callback_kwargs[k] = locals()[k]
                callback_outputs = callback_on_step_end(self, i, t, callback_kwargs)

                latents = callback_outputs.pop(""latents"", latents)
                prompt_embeds = callback_outputs.pop(""prompt_embeds"", prompt_embeds)
                negative_prompt_embeds = callback_outputs.pop(""negative_prompt_embeds"", negative_prompt_embeds)
                negative_pooled_prompt_embeds = callback_outputs.pop(
                    ""negative_pooled_prompt_embeds"", negative_pooled_prompt_embeds
                )

        if output_type == ""latent"":
            image = latents
        else:
            latents = (latents / self.vae.config.scaling_factor) + self.vae.config.shift_factor
            image = self.vae.decode(latents, return_dict=False)[0]
            image = self.image_processor.postprocess(image, output_type=output_type)

        return image


if __name__ == '__main__':
    device = ""cuda"" 
    dtype = torch.float16

    text_encoder_path = 'google/umt5-xxl'
    text_encoder_path1 = ""Tencent-Hunyuan/HunyuanDiT/t2i""
    text_encoder_path2 = 'laion/CLIP-ViT-H-14-frozen-xlm-roberta-large-laion5B-s13B-b90k/open_clip_pytorch_model.bin'

    model_path = ""stabilityai/stable-diffusion-3-medium-diffusers""
    proj_path =  ""OPPOer/MultilingualSD3-adapter/pytorch_model.bin""
    proj_t5_path =  ""OPPOer/MultilingualSD3-adapter/pytorch_model_t5.bin""

    sdt = StableDiffusionTest(model_path,text_encoder_path,text_encoder_path1,text_encoder_path2,proj_path,proj_t5_path)

    batch=2
    height = 1024
    width = 1024      
    while True:
        raw_text = input(""\nPlease Input Query (stop to exit) >>> "")
        if not raw_text:
            print('Query should not be empty!')
            continue
        if raw_text == ""stop"":
            break
        images = sdt([raw_text]*batch,height=height,width=width)
        grid = image_grid(images, rows=1, cols=batch)
        grid.save(""MultilingualSD3.png"")


```
To learn more check out the [diffusers](https://huggingface.co/docs/diffusers/main/en/api/pipelines/flux) documentation


# License
The adapter itself is Apache License 2.0, but it must follow the license of the main model.","{""id"": ""OPPOer/MultilingualSD3-adapter"", ""author"": ""OPPOer"", ""sha"": ""f42cb06100e831847cfa71092dd983cdbedb5e78"", ""last_modified"": ""2024-10-26 08:44:06+00:00"", ""created_at"": ""2024-10-26 08:20:12+00:00"", ""private"": false, ""gated"": false, ""disabled"": false, ""downloads"": 0, ""downloads_all_time"": null, ""likes"": 1, ""library_name"": null, ""gguf"": null, ""inference"": null, ""tags"": [""pytorch"", ""text-to-image"", ""zh"", ""arxiv:2311.17086"", ""arxiv:2205.11487"", ""base_model:stabilityai/stable-diffusion-3-medium"", ""base_model:finetune:stabilityai/stable-diffusion-3-medium"", ""license:apache-2.0"", ""region:us""], ""pipeline_tag"": ""text-to-image"", ""mask_token"": null, ""trending_score"": null, ""card_data"": ""base_model:\n- stabilityai/stable-diffusion-3-medium\nlanguage:\n- zh\nlicense: apache-2.0\npipeline_tag: text-to-image"", ""widget_data"": null, ""model_index"": null, ""config"": null, ""transformers_info"": null, ""siblings"": [""RepoSibling(rfilename='.gitattributes', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='PEA-Diffusion.png', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='README.md', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='pytorch_model.bin', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='pytorch_model_t5.bin', size=None, blob_id=None, lfs=None)""], ""spaces"": [], ""safetensors"": null, ""security_repo_status"": null, ""lastModified"": ""2024-10-26 08:44:06+00:00"", ""cardData"": ""base_model:\n- stabilityai/stable-diffusion-3-medium\nlanguage:\n- zh\nlicense: apache-2.0\npipeline_tag: text-to-image"", ""transformersInfo"": null, ""_id"": ""671ca63c255aa50ebb650635"", ""modelId"": ""OPPOer/MultilingualSD3-adapter"", ""usedStorage"": 436399540}",1,,0,,0,,0,,0,huggingface/InferenceSupport/discussions/new?title=OPPOer/MultilingualSD3-adapter&description=React%20to%20this%20comment%20with%20an%20emoji%20to%20vote%20for%20%5BOPPOer%2FMultilingualSD3-adapter%5D(%2FOPPOer%2FMultilingualSD3-adapter)%20to%20be%20supported%20by%20Inference%20Providers.%0A%0A(optional)%20Which%20providers%20are%20you%20interested%20in%3F%20(Novita%2C%20Hyperbolic%2C%20Together%E2%80%A6)%0A,1
Dreyyt/Analog_Madness_Realistic_model,"---
license: other
license_name: private
license_link: LICENSE
pipeline_tag: text-to-image
base_model:
- stabilityai/stable-diffusion-3-medium
library_name: diffusers
---","{""id"": ""Dreyyt/Analog_Madness_Realistic_model"", ""author"": ""Dreyyt"", ""sha"": ""3a0c6a663c7aba834ebde4fc6b49d9cfb5ec3a91"", ""last_modified"": ""2024-09-14 13:39:49+00:00"", ""created_at"": ""2024-09-14 11:09:32+00:00"", ""private"": false, ""gated"": ""auto"", ""disabled"": false, ""downloads"": 0, ""downloads_all_time"": null, ""likes"": 1, ""library_name"": ""diffusers"", ""gguf"": null, ""inference"": null, ""tags"": [""diffusers"", ""text-to-image"", ""base_model:stabilityai/stable-diffusion-3-medium"", ""base_model:finetune:stabilityai/stable-diffusion-3-medium"", ""doi:10.57967/hf/3069"", ""license:other"", ""region:us""], ""pipeline_tag"": ""text-to-image"", ""mask_token"": null, ""trending_score"": null, ""card_data"": ""base_model:\n- stabilityai/stable-diffusion-3-medium\nlibrary_name: diffusers\nlicense: other\nlicense_name: private\nlicense_link: LICENSE\npipeline_tag: text-to-image"", ""widget_data"": null, ""model_index"": null, ""config"": null, ""transformers_info"": null, ""siblings"": [""RepoSibling(rfilename='.gitattributes', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='LICENSE', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='README.md', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='analogMadness_v50.safetensors', size=None, blob_id=None, lfs=None)""], ""spaces"": [], ""safetensors"": null, ""security_repo_status"": null, ""lastModified"": ""2024-09-14 13:39:49+00:00"", ""cardData"": ""base_model:\n- stabilityai/stable-diffusion-3-medium\nlibrary_name: diffusers\nlicense: other\nlicense_name: private\nlicense_link: LICENSE\npipeline_tag: text-to-image"", ""transformersInfo"": null, ""_id"": ""66e56eec6e6ce3af72f542ef"", ""modelId"": ""Dreyyt/Analog_Madness_Realistic_model"", ""usedStorage"": 2378778340}",1,,0,,0,,0,,0,huggingface/InferenceSupport/discussions/new?title=Dreyyt/Analog_Madness_Realistic_model&description=React%20to%20this%20comment%20with%20an%20emoji%20to%20vote%20for%20%5BDreyyt%2FAnalog_Madness_Realistic_model%5D(%2FDreyyt%2FAnalog_Madness_Realistic_model)%20to%20be%20supported%20by%20Inference%20Providers.%0A%0A(optional)%20Which%20providers%20are%20you%20interested%20in%3F%20(Novita%2C%20Hyperbolic%2C%20Together%E2%80%A6)%0A,1
vdo/pyramid-flow-sd3,"---
license: mit
base_model:
- stabilityai/stable-diffusion-3-medium
---

# ⚡️Pyramid Flow⚡️

[[Paper]](https://arxiv.org/abs/2410.05954) [[Project Page ✨]](https://pyramid-flow.github.io) [[Code 🚀]](https://github.com/jy0205/Pyramid-Flow)

This is the official repository for Pyramid Flow, a training-efficient **Autoregressive Video Generation** method based on **Flow Matching**. By training only on open-source datasets, it generates high-quality 10-second videos at 768p resolution and 24 FPS, and naturally supports image-to-video generation.

<table class=""center"" border=""0"" style=""width: 100%; text-align: left;"">
<tr>
  <th>10s, 768p, 24fps</th>
  <th>5s, 768p, 24fps</th>
  <th>Image-to-video</th>
</tr>
<tr>
  <td><video src=""https://pyramid-flow.github.io/static/videos/t2v_10s/fireworks.mp4"" autoplay muted loop playsinline></video></td>
  <td><video src=""https://pyramid-flow.github.io/static/videos/t2v/trailer.mp4"" autoplay muted loop playsinline></video></td>
  <td><video src=""https://pyramid-flow.github.io/static/videos/i2v/sunday.mp4"" autoplay muted loop playsinline></video></td>
</tr>
</table>

## News

* `COMING SOON` ⚡️⚡️⚡️ Training code and new model checkpoints trained from scratch.
* `2024.10.10`  🚀🚀🚀 We release the [technical report](https://arxiv.org/abs/2410.05954), [project page](https://pyramid-flow.github.io) and [model checkpoint](https://huggingface.co/rain1011/pyramid-flow-sd3) of Pyramid Flow.

## Usage

You can directly download the model from [Huggingface](https://huggingface.co/rain1011/pyramid-flow-sd3). We provide both model checkpoints for 768p and 384p video generation. The 384p checkpoint supports 5-second video generation at 24FPS, while the 768p checkpoint supports up to 10-second video generation at 24FPS.

```python
from huggingface_hub import snapshot_download

model_path = 'PATH'   # The local directory to save downloaded checkpoint
snapshot_download(""rain1011/pyramid-flow-sd3"", local_dir=model_path, local_dir_use_symlinks=False, repo_type='model')
```

To use our model, please follow the inference code in `video_generation_demo.ipynb` at [this link](https://github.com/jy0205/Pyramid-Flow/blob/main/video_generation_demo.ipynb). We further simplify it into the following two-step procedure. First, load the downloaded model:

```python
import torch
from PIL import Image
from pyramid_dit import PyramidDiTForVideoGeneration
from diffusers.utils import load_image, export_to_video

torch.cuda.set_device(0)
model_dtype, torch_dtype = 'bf16', torch.bfloat16   # Use bf16, fp16 or fp32	

model = PyramidDiTForVideoGeneration(
    'PATH',                                         # The downloaded checkpoint dir
    model_dtype,
    model_variant='diffusion_transformer_768p',     # 'diffusion_transformer_384p'
)

model.vae.to(""cuda"")
model.dit.to(""cuda"")
model.text_encoder.to(""cuda"")
model.vae.enable_tiling()
```

Then, you can try text-to-video generation on your own prompts:

```python
prompt = ""A movie trailer featuring the adventures of the 30 year old space man wearing a red wool knitted motorcycle helmet, blue sky, salt desert, cinematic style, shot on 35mm film, vivid colors""

with torch.no_grad(), torch.cuda.amp.autocast(enabled=True, dtype=torch_dtype):
    frames = model.generate(
        prompt=prompt,
        num_inference_steps=[20, 20, 20],
        video_num_inference_steps=[10, 10, 10],
        height=768,     
        width=1280,
        temp=16,                    # temp=16: 5s, temp=31: 10s
        guidance_scale=9.0,         # The guidance for the first frame
        video_guidance_scale=5.0,   # The guidance for the other video latent
        output_type=""pil"",
    )

export_to_video(frames, ""./text_to_video_sample.mp4"", fps=24)
```

As an autoregressive model, our model also supports (text conditioned) image-to-video generation:

```python
image = Image.open('assets/the_great_wall.jpg').convert(""RGB"").resize((1280, 768))
prompt = ""FPV flying over the Great Wall""

with torch.no_grad(), torch.cuda.amp.autocast(enabled=True, dtype=torch_dtype):
    frames = model.generate_i2v(
        prompt=prompt,
        input_image=image,
        num_inference_steps=[10, 10, 10],
        temp=16,
        video_guidance_scale=4.0,
        output_type=""pil"",
    )

export_to_video(frames, ""./image_to_video_sample.mp4"", fps=24)
```

Usage tips:

* The `guidance_scale` parameter controls the visual quality. We suggest using a guidance within [7, 9] for the 768p checkpoint during text-to-video generation, and 7 for the 384p checkpoint.
* The `video_guidance_scale` parameter controls the motion. A larger value increases the dynamic degree and mitigates the autoregressive generation degradation, while a smaller value stabilizes the video.
* For 10-second video generation, we recommend using a guidance scale of 7 and a video guidance scale of 5.

## Gallery

The following video examples are generated at 5s, 768p, 24fps. For more results, please visit our [project page](https://pyramid-flow.github.io).

<table class=""center"" border=""0"" style=""width: 100%; text-align: left;"">
<tr>
  <td><video src=""https://pyramid-flow.github.io/static/videos/t2v/tokyo.mp4"" autoplay muted loop playsinline></video></td>
  <td><video src=""https://pyramid-flow.github.io/static/videos/t2v/eiffel.mp4"" autoplay muted loop playsinline></video></td>
</tr>
<tr>
  <td><video src=""https://pyramid-flow.github.io/static/videos/t2v/waves.mp4"" autoplay muted loop playsinline></video></td>
  <td><video src=""https://pyramid-flow.github.io/static/videos/t2v/rail.mp4"" autoplay muted loop playsinline></video></td>
</tr>
</table>

## Acknowledgement

We are grateful for the following awesome projects when implementing Pyramid Flow:

* [SD3 Medium](https://huggingface.co/stabilityai/stable-diffusion-3-medium) and [Flux 1.0](https://huggingface.co/black-forest-labs/FLUX.1-dev): State-of-the-art image generation models based on flow matching.
* [Diffusion Forcing](https://boyuan.space/diffusion-forcing) and [GameNGen](https://gamengen.github.io): Next-token prediction meets full-sequence diffusion.
* [WebVid-10M](https://github.com/m-bain/webvid), [OpenVid-1M](https://github.com/NJU-PCALab/OpenVid-1M) and [Open-Sora Plan](https://github.com/PKU-YuanGroup/Open-Sora-Plan): Large-scale datasets for text-to-video generation.
* [CogVideoX](https://github.com/THUDM/CogVideo): An open-source text-to-video generation model that shares many training details.
* [Video-LLaMA2](https://github.com/DAMO-NLP-SG/VideoLLaMA2): An open-source video LLM for our video recaptioning.

## Citation

Consider giving this repository a star and cite Pyramid Flow in your publications if it helps your research.
```
@article{jin2024pyramidal,
  title={Pyramidal Flow Matching for Efficient Video Generative Modeling},
  author={Jin, Yang and Sun, Zhicheng and Li, Ningyuan and Xu, Kun and Xu, Kun and Jiang, Hao and Zhuang, Nan and Huang, Quzhe and Song, Yang and Mu, Yadong and Lin, Zhouchen},
  jounal={arXiv preprint arXiv:2410.05954},
  year={2024}
}
```","{""id"": ""vdo/pyramid-flow-sd3"", ""author"": ""vdo"", ""sha"": ""db75c748d9195dd6e0cc684907a4575e7c6cdfd8"", ""last_modified"": ""2024-10-10 05:58:18+00:00"", ""created_at"": ""2024-10-10 05:50:04+00:00"", ""private"": false, ""gated"": false, ""disabled"": false, ""downloads"": 0, ""downloads_all_time"": null, ""likes"": 5, ""library_name"": ""diffusers"", ""gguf"": null, ""inference"": null, ""tags"": [""diffusers"", ""safetensors"", ""arxiv:2410.05954"", ""base_model:stabilityai/stable-diffusion-3-medium"", ""base_model:finetune:stabilityai/stable-diffusion-3-medium"", ""license:mit"", ""region:us""], ""pipeline_tag"": null, ""mask_token"": null, ""trending_score"": null, ""card_data"": ""base_model:\n- stabilityai/stable-diffusion-3-medium\nlicense: mit"", ""widget_data"": null, ""model_index"": null, ""config"": null, ""transformers_info"": null, ""siblings"": [""RepoSibling(rfilename='.gitattributes', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='README.md', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='causal_video_vae/config.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='causal_video_vae/diffusion_pytorch_model.bin', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='diffusion_transformer_384p/config.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='diffusion_transformer_384p/diffusion_pytorch_model.bin', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='diffusion_transformer_768p/config.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='diffusion_transformer_768p/diffusion_pytorch_model.bin', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='text_encoder/config.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='text_encoder/model.safetensors', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='text_encoder_2/config.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='text_encoder_2/model.safetensors', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='text_encoder_3/config.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='text_encoder_3/model-00001-of-00002.safetensors', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='text_encoder_3/model-00002-of-00002.safetensors', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='text_encoder_3/model.safetensors.index.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer/merges.txt', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer/special_tokens_map.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer/tokenizer_config.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer/vocab.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer_2/merges.txt', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer_2/special_tokens_map.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer_2/tokenizer_config.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer_2/vocab.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer_3/special_tokens_map.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer_3/spiece.model', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer_3/tokenizer.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer_3/tokenizer_config.json', size=None, blob_id=None, lfs=None)""], ""spaces"": [], ""safetensors"": null, ""security_repo_status"": null, ""lastModified"": ""2024-10-10 05:58:18+00:00"", ""cardData"": ""base_model:\n- stabilityai/stable-diffusion-3-medium\nlicense: mit"", ""transformersInfo"": null, ""_id"": ""67076b0c065c99af40ef7a35"", ""modelId"": ""vdo/pyramid-flow-sd3"", ""usedStorage"": 29184241604}",1,,0,,0,,0,,0,huggingface/InferenceSupport/discussions/new?title=vdo/pyramid-flow-sd3&description=React%20to%20this%20comment%20with%20an%20emoji%20to%20vote%20for%20%5Bvdo%2Fpyramid-flow-sd3%5D(%2Fvdo%2Fpyramid-flow-sd3)%20to%20be%20supported%20by%20Inference%20Providers.%0A%0A(optional)%20Which%20providers%20are%20you%20interested%20in%3F%20(Novita%2C%20Hyperbolic%2C%20Together%E2%80%A6)%0A,1
Ziyaad30/Pyramid-Flow-sd3,"---
license: other
license_name: stabilityai-ai-community
license_link: LICENSE.md
base_model:
- stabilityai/stable-diffusion-3-medium
pipeline_tag: text-to-video
tags:
- image-to-video
---

# ⚡️Pyramid Flow⚡️

[[Paper]](https://arxiv.org/abs/2410.05954) [[Project Page ✨]](https://pyramid-flow.github.io) [[Code 🚀]](https://github.com/jy0205/Pyramid-Flow)

This is the official repository for Pyramid Flow, a training-efficient **Autoregressive Video Generation** method based on **Flow Matching**. By training only on open-source datasets, it generates high-quality 10-second videos at 768p resolution and 24 FPS, and naturally supports image-to-video generation.

<table class=""center"" border=""0"" style=""width: 100%; text-align: left;"">
<tr>
  <th>10s, 768p, 24fps</th>
  <th>5s, 768p, 24fps</th>
  <th>Image-to-video</th>
</tr>
<tr>
  <td><video src=""https://pyramid-flow.github.io/static/videos/t2v_10s/fireworks.mp4"" autoplay muted loop playsinline></video></td>
  <td><video src=""https://pyramid-flow.github.io/static/videos/t2v/trailer.mp4"" autoplay muted loop playsinline></video></td>
  <td><video src=""https://pyramid-flow.github.io/static/videos/i2v/sunday.mp4"" autoplay muted loop playsinline></video></td>
</tr>
</table>

## News

* `COMING SOON` ⚡️⚡️⚡️ Training code and new model checkpoints trained from scratch.
* `2024.10.10`  🚀🚀🚀 We release the [technical report](https://arxiv.org/abs/2410.05954), [project page](https://pyramid-flow.github.io) and [model checkpoint](https://huggingface.co/rain1011/pyramid-flow-sd3) of Pyramid Flow.

## Usage

You can directly download the model from [Huggingface](https://huggingface.co/rain1011/pyramid-flow-sd3). We provide both model checkpoints for 768p and 384p video generation. The 384p checkpoint supports 5-second video generation at 24FPS, while the 768p checkpoint supports up to 10-second video generation at 24FPS.

```python
from huggingface_hub import snapshot_download

model_path = 'PATH'   # The local directory to save downloaded checkpoint
snapshot_download(""rain1011/pyramid-flow-sd3"", local_dir=model_path, local_dir_use_symlinks=False, repo_type='model')
```

To use our model, please follow the inference code in `video_generation_demo.ipynb` at [this link](https://github.com/jy0205/Pyramid-Flow/blob/main/video_generation_demo.ipynb). We further simplify it into the following two-step procedure. First, load the downloaded model:

```python
import torch
from PIL import Image
from pyramid_dit import PyramidDiTForVideoGeneration
from diffusers.utils import load_image, export_to_video

torch.cuda.set_device(0)
model_dtype, torch_dtype = 'bf16', torch.bfloat16   # Use bf16, fp16 or fp32	

model = PyramidDiTForVideoGeneration(
    'PATH',                                         # The downloaded checkpoint dir
    model_dtype,
    model_variant='diffusion_transformer_768p',     # 'diffusion_transformer_384p'
)

model.vae.to(""cuda"")
model.dit.to(""cuda"")
model.text_encoder.to(""cuda"")
model.vae.enable_tiling()
```

Then, you can try text-to-video generation on your own prompts:

```python
prompt = ""A movie trailer featuring the adventures of the 30 year old space man wearing a red wool knitted motorcycle helmet, blue sky, salt desert, cinematic style, shot on 35mm film, vivid colors""

with torch.no_grad(), torch.cuda.amp.autocast(enabled=True, dtype=torch_dtype):
    frames = model.generate(
        prompt=prompt,
        num_inference_steps=[20, 20, 20],
        video_num_inference_steps=[10, 10, 10],
        height=768,     
        width=1280,
        temp=16,                    # temp=16: 5s, temp=31: 10s
        guidance_scale=9.0,         # The guidance for the first frame
        video_guidance_scale=5.0,   # The guidance for the other video latent
        output_type=""pil"",
    )

export_to_video(frames, ""./text_to_video_sample.mp4"", fps=24)
```

As an autoregressive model, our model also supports (text conditioned) image-to-video generation:

```python
image = Image.open('assets/the_great_wall.jpg').convert(""RGB"").resize((1280, 768))
prompt = ""FPV flying over the Great Wall""

with torch.no_grad(), torch.cuda.amp.autocast(enabled=True, dtype=torch_dtype):
    frames = model.generate_i2v(
        prompt=prompt,
        input_image=image,
        num_inference_steps=[10, 10, 10],
        temp=16,
        video_guidance_scale=4.0,
        output_type=""pil"",
    )

export_to_video(frames, ""./image_to_video_sample.mp4"", fps=24)
```

Usage tips:

* The `guidance_scale` parameter controls the visual quality. We suggest using a guidance within [7, 9] for the 768p checkpoint during text-to-video generation, and 7 for the 384p checkpoint.
* The `video_guidance_scale` parameter controls the motion. A larger value increases the dynamic degree and mitigates the autoregressive generation degradation, while a smaller value stabilizes the video.
* For 10-second video generation, we recommend using a guidance scale of 7 and a video guidance scale of 5.

## Gallery

The following video examples are generated at 5s, 768p, 24fps. For more results, please visit our [project page](https://pyramid-flow.github.io).

<table class=""center"" border=""0"" style=""width: 100%; text-align: left;"">
<tr>
  <td><video src=""https://pyramid-flow.github.io/static/videos/t2v/tokyo.mp4"" autoplay muted loop playsinline></video></td>
  <td><video src=""https://pyramid-flow.github.io/static/videos/t2v/eiffel.mp4"" autoplay muted loop playsinline></video></td>
</tr>
<tr>
  <td><video src=""https://pyramid-flow.github.io/static/videos/t2v/waves.mp4"" autoplay muted loop playsinline></video></td>
  <td><video src=""https://pyramid-flow.github.io/static/videos/t2v/rail.mp4"" autoplay muted loop playsinline></video></td>
</tr>
</table>

## Acknowledgement

We are grateful for the following awesome projects when implementing Pyramid Flow:

* [SD3 Medium](https://huggingface.co/stabilityai/stable-diffusion-3-medium) and [Flux 1.0](https://huggingface.co/black-forest-labs/FLUX.1-dev): State-of-the-art image generation models based on flow matching.
* [Diffusion Forcing](https://boyuan.space/diffusion-forcing) and [GameNGen](https://gamengen.github.io): Next-token prediction meets full-sequence diffusion.
* [WebVid-10M](https://github.com/m-bain/webvid), [OpenVid-1M](https://github.com/NJU-PCALab/OpenVid-1M) and [Open-Sora Plan](https://github.com/PKU-YuanGroup/Open-Sora-Plan): Large-scale datasets for text-to-video generation.
* [CogVideoX](https://github.com/THUDM/CogVideo): An open-source text-to-video generation model that shares many training details.
* [Video-LLaMA2](https://github.com/DAMO-NLP-SG/VideoLLaMA2): An open-source video LLM for our video recaptioning.

## Citation

Consider giving this repository a star and cite Pyramid Flow in your publications if it helps your research.
```
@article{jin2024pyramidal,
  title={Pyramidal Flow Matching for Efficient Video Generative Modeling},
  author={Jin, Yang and Sun, Zhicheng and Li, Ningyuan and Xu, Kun and Xu, Kun and Jiang, Hao and Zhuang, Nan and Huang, Quzhe and Song, Yang and Mu, Yadong and Lin, Zhouchen},
  jounal={arXiv preprint arXiv:2410.05954},
  year={2024}
}
```","{""id"": ""Ziyaad30/Pyramid-Flow-sd3"", ""author"": ""Ziyaad30"", ""sha"": ""91d07c21bc12bfc1e89515ddac75dc26f9ed5153"", ""last_modified"": ""2024-10-10 20:03:06+00:00"", ""created_at"": ""2024-10-10 20:02:42+00:00"", ""private"": false, ""gated"": false, ""disabled"": false, ""downloads"": 0, ""downloads_all_time"": null, ""likes"": 2, ""library_name"": ""diffusers"", ""gguf"": null, ""inference"": null, ""tags"": [""diffusers"", ""safetensors"", ""image-to-video"", ""text-to-video"", ""arxiv:2410.05954"", ""base_model:stabilityai/stable-diffusion-3-medium"", ""base_model:finetune:stabilityai/stable-diffusion-3-medium"", ""license:other"", ""region:us""], ""pipeline_tag"": ""text-to-video"", ""mask_token"": null, ""trending_score"": null, ""card_data"": ""base_model:\n- stabilityai/stable-diffusion-3-medium\nlicense: other\nlicense_name: stabilityai-ai-community\nlicense_link: LICENSE.md\npipeline_tag: text-to-video\ntags:\n- image-to-video"", ""widget_data"": null, ""model_index"": null, ""config"": null, ""transformers_info"": null, ""siblings"": [""RepoSibling(rfilename='.gitattributes', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='LICENSE.md', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='README.md', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='causal_video_vae/config.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='causal_video_vae/diffusion_pytorch_model.bin', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='diffusion_transformer_384p/config.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='diffusion_transformer_384p/diffusion_pytorch_model.bin', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='text_encoder/config.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='text_encoder/model.safetensors', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='text_encoder_2/config.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='text_encoder_2/model.safetensors', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='text_encoder_3/config.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='text_encoder_3/model-00001-of-00002.safetensors', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='text_encoder_3/model-00002-of-00002.safetensors', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='text_encoder_3/model.safetensors.index.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer/merges.txt', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer/special_tokens_map.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer/tokenizer_config.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer/vocab.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer_2/merges.txt', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer_2/special_tokens_map.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer_2/tokenizer_config.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer_2/vocab.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer_3/special_tokens_map.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer_3/spiece.model', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer_3/tokenizer.json', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='tokenizer_3/tokenizer_config.json', size=None, blob_id=None, lfs=None)""], ""spaces"": [], ""safetensors"": null, ""security_repo_status"": null, ""lastModified"": ""2024-10-10 20:03:06+00:00"", ""cardData"": ""base_model:\n- stabilityai/stable-diffusion-3-medium\nlicense: other\nlicense_name: stabilityai-ai-community\nlicense_link: LICENSE.md\npipeline_tag: text-to-video\ntags:\n- image-to-video"", ""transformersInfo"": null, ""_id"": ""670832e2a98933396d054894"", ""modelId"": ""Ziyaad30/Pyramid-Flow-sd3"", ""usedStorage"": 34025081498}",1,,0,,0,,0,,0,huggingface/InferenceSupport/discussions/new?title=Ziyaad30/Pyramid-Flow-sd3&description=React%20to%20this%20comment%20with%20an%20emoji%20to%20vote%20for%20%5BZiyaad30%2FPyramid-Flow-sd3%5D(%2FZiyaad30%2FPyramid-Flow-sd3)%20to%20be%20supported%20by%20Inference%20Providers.%0A%0A(optional)%20Which%20providers%20are%20you%20interested%20in%3F%20(Novita%2C%20Hyperbolic%2C%20Together%E2%80%A6)%0A,1
boryanagm/beatrix_LoRA,"---
library_name: diffusers
pipeline_tag: text-to-image
base_model: stabilityai/stable-diffusion-3-medium
---
# LoRA Model Card for beatrix_LoRA
### Instance Prompt
in the style of BEATRIX
","{""id"": ""boryanagm/beatrix_LoRA"", ""author"": ""boryanagm"", ""sha"": ""7f1a78d292eea36ed6f65ffc28d858a237d6e808"", ""last_modified"": ""2024-11-27 08:52:56+00:00"", ""created_at"": ""2024-11-25 14:14:08+00:00"", ""private"": false, ""gated"": false, ""disabled"": false, ""downloads"": 0, ""downloads_all_time"": null, ""likes"": 0, ""library_name"": ""diffusers"", ""gguf"": null, ""inference"": null, ""tags"": [""diffusers"", ""text-to-image"", ""base_model:stabilityai/stable-diffusion-3-medium"", ""base_model:finetune:stabilityai/stable-diffusion-3-medium"", ""region:us""], ""pipeline_tag"": ""text-to-image"", ""mask_token"": null, ""trending_score"": null, ""card_data"": ""base_model: stabilityai/stable-diffusion-3-medium\nlibrary_name: diffusers\npipeline_tag: text-to-image"", ""widget_data"": null, ""model_index"": null, ""config"": null, ""transformers_info"": null, ""siblings"": [""RepoSibling(rfilename='.gitattributes', size=None, blob_id=None, lfs=None)"", ""RepoSibling(rfilename='README.md', size=None, blob_id=None, lfs=None)""], ""spaces"": [], ""safetensors"": null, ""security_repo_status"": null, ""lastModified"": ""2024-11-27 08:52:56+00:00"", ""cardData"": ""base_model: stabilityai/stable-diffusion-3-medium\nlibrary_name: diffusers\npipeline_tag: text-to-image"", ""transformersInfo"": null, ""_id"": ""674486303c7de9897b96d72f"", ""modelId"": ""boryanagm/beatrix_LoRA"", ""usedStorage"": 0}",1,,0,,0,,0,,0,huggingface/InferenceSupport/discussions/new?title=boryanagm/beatrix_LoRA&description=React%20to%20this%20comment%20with%20an%20emoji%20to%20vote%20for%20%5Bboryanagm%2Fbeatrix_LoRA%5D(%2Fboryanagm%2Fbeatrix_LoRA)%20to%20be%20supported%20by%20Inference%20Providers.%0A%0A(optional)%20Which%20providers%20are%20you%20interested%20in%3F%20(Novita%2C%20Hyperbolic%2C%20Together%E2%80%A6)%0A,1
